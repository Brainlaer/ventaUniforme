{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CarritoService {\n  constructor() {\n    this.vestimentas = [];\n    this.costo = new BehaviorSubject(0);\n  }\n  getVestimentas() {\n    return this.vestimentas;\n  }\n  getTotal() {\n    return this.costo.asObservable();\n  }\n  addVestimenta(vestimenta) {\n    // Busca una vestimenta existente que coincida con el ID y la talla\n    let vestimentaExistente = this.vestimentas.find(item => item.vestimenta.id === vestimenta.id && item.vestimenta.talla === vestimenta.talla);\n    if (vestimentaExistente) {\n      // Si ya existe una vestimenta con la misma ID y talla, solo incrementa las unidades\n      vestimentaExistente.vestimenta.unidadesVestimenta += 1;\n    } else {\n      // Si no existe, agrega una nueva entrada al carrito\n      let vestimentaItem = {\n        id: this.vestimentas.length + 1,\n        vestimenta: {\n          ...vestimenta,\n          unidadesVestimenta: 1\n        }\n      };\n      this.vestimentas.push(vestimentaItem);\n    }\n    this.costo.next(this.costo.value + Number(vestimenta.costo));\n    sessionStorage.setItem('vestimentas', JSON.stringify(this.vestimentas));\n  }\n  removeVestimenta(vestimentaItem) {\n    if (vestimentaItem.vestimenta.unidadesVestimenta > 1) {\n      vestimentaItem.vestimenta.unidadesVestimenta--;\n    } else {\n      const index = this.vestimentas.indexOf(vestimentaItem);\n      if (index > -1) {\n        let vestimentas = this.vestimentas.splice(index, 1);\n        sessionStorage.setItem('vestimenta', JSON.stringifyvestimentas);\n      }\n    }\n    this.costo.next(this.costo.value - Number(vestimentaItem.vestimenta.costo));\n  }\n  countVestimentas(vestimentaList) {\n    if (vestimentaList.length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function CarritoService_Factory(t) {\n    return new (t || CarritoService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CarritoService,\n    factory: CarritoService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAMtC,OAAM,MAAOC,cAAc;EAEzBC;IAEQ,gBAAW,GAAU,EAAE;IACvB,UAAK,GAA4B,IAAIF,eAAe,CAAS,CAAC,CAAC;EAHvD;EAKhBG,cAAc;IACZ,OAAO,IAAI,CAACC,WAAW;EAEzB;EACAC,QAAQ;IACN,OAAO,IAAI,CAACC,KAAK,CAACC,YAAY,EAAE;EAClC;EAEAC,aAAa,CAACC,UAAe;IAC3B;IACA,IAAIC,mBAAmB,GAAG,IAAI,CAACN,WAAW,CAACO,IAAI,CAACC,IAAI,IAClDA,IAAI,CAACH,UAAU,CAACI,EAAE,KAAKJ,UAAU,CAACI,EAAE,IACpCD,IAAI,CAACH,UAAU,CAACK,KAAK,KAAKL,UAAU,CAACK,KAAK,CAC3C;IAED,IAAIJ,mBAAmB,EAAE;MACvB;MACAA,mBAAmB,CAACD,UAAU,CAACM,kBAAkB,IAAI,CAAC;KACvD,MAAM;MACL;MACA,IAAIC,cAAc,GAAG;QACnBH,EAAE,EAAE,IAAI,CAACT,WAAW,CAACa,MAAM,GAAG,CAAC;QAC/BR,UAAU,EAAE;UAAE,GAAGA,UAAU;UAAEM,kBAAkB,EAAE;QAAC;OACnD;MACD,IAAI,CAACX,WAAW,CAACc,IAAI,CAACF,cAAc,CAAC;;IAEvC,IAAI,CAACV,KAAK,CAACa,IAAI,CAAC,IAAI,CAACb,KAAK,CAACc,KAAK,GAAGC,MAAM,CAACZ,UAAU,CAACH,KAAK,CAAC,CAAC;IAE5DgB,cAAc,CAACC,OAAO,CAAC,aAAa,EAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACrB,WAAW,CAAC,CAAC;EAExE;EACAsB,gBAAgB,CAACV,cAAmB;IAClC,IAAIA,cAAc,CAACP,UAAU,CAACM,kBAAkB,GAAG,CAAC,EAAE;MACpDC,cAAc,CAACP,UAAU,CAACM,kBAAkB,EAAE;KAC/C,MAAM;MACL,MAAMY,KAAK,GAAG,IAAI,CAACvB,WAAW,CAACwB,OAAO,CAACZ,cAAc,CAAC;MACtD,IAAIW,KAAK,GAAG,CAAC,CAAC,EAAE;QACd,IAAIvB,WAAW,GAAC,IAAI,CAACA,WAAW,CAACyB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;QACjDL,cAAc,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACM,oBAAoB,CAAC;;;IAInE,IAAI,CAACxB,KAAK,CAACa,IAAI,CAAC,IAAI,CAACb,KAAK,CAACc,KAAK,GAAGC,MAAM,CAACL,cAAc,CAACP,UAAU,CAACH,KAAK,CAAC,CAAC;EAE7E;EACAyB,gBAAgB,CAACC,cAAmB;IAClC,IAAIA,cAAc,CAACf,MAAM,GAAG,CAAC,EAAE;MAC7B,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,KAAK;;EAEhB;EAAC;qBA1DUhB,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAgC,SAAdhC,cAAc;IAAAiC,YAFb;EAAM","names":["BehaviorSubject","CarritoService","constructor","getVestimentas","vestimentas","getTotal","costo","asObservable","addVestimenta","vestimenta","vestimentaExistente","find","item","id","talla","unidadesVestimenta","vestimentaItem","length","push","next","value","Number","sessionStorage","setItem","JSON","stringify","removeVestimenta","index","indexOf","splice","stringifyvestimentas","countVestimentas","vestimentaList","factory","providedIn"],"sourceRoot":"","sources":["/home/bsvanegas/Documents/Workspace/deporte/ventaUniformeFrontend/src/app/services/carrito/carrito.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { IVestimentaResultado } from 'src/app/models/vestimenta-preview';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CarritoService {\n\n  constructor() { }\n\n  private vestimentas: any[] = [];\n  private costo: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n\n  getVestimentas() {\n    return this.vestimentas;\n\n  }\n  getTotal() {\n    return this.costo.asObservable();\n  }\n\n  addVestimenta(vestimenta: any) {\n    // Busca una vestimenta existente que coincida con el ID y la talla\n    let vestimentaExistente = this.vestimentas.find(item => \n      item.vestimenta.id === vestimenta.id && \n      item.vestimenta.talla === vestimenta.talla\n    );\n\n    if (vestimentaExistente) {\n      // Si ya existe una vestimenta con la misma ID y talla, solo incrementa las unidades\n      vestimentaExistente.vestimenta.unidadesVestimenta += 1;\n    } else {\n      // Si no existe, agrega una nueva entrada al carrito\n      let vestimentaItem = {\n        id: this.vestimentas.length + 1,\n        vestimenta: { ...vestimenta, unidadesVestimenta: 1 }\n      };\n      this.vestimentas.push(vestimentaItem);\n    }\n    this.costo.next(this.costo.value + Number(vestimenta.costo));\n\n    sessionStorage.setItem('vestimentas',JSON.stringify(this.vestimentas));\n\n  }\n  removeVestimenta(vestimentaItem: any) {\n    if (vestimentaItem.vestimenta.unidadesVestimenta > 1) {\n      vestimentaItem.vestimenta.unidadesVestimenta--;\n    } else {\n      const index = this.vestimentas.indexOf(vestimentaItem);\n      if (index > -1) {\n        let vestimentas=this.vestimentas.splice(index, 1);\n        sessionStorage.setItem('vestimenta', JSON.stringifyvestimentas);\n      }\n\n    }\n    this.costo.next(this.costo.value - Number(vestimentaItem.vestimenta.costo));\n\n  }\n  countVestimentas(vestimentaList: any): boolean {\n    if (vestimentaList.length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}