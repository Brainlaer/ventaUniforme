{"ast":null,"code":"import { environment } from 'src/app/environments/environment';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  iniciarSession(persona) {\n    return this.httpClient.post(`${environment.url}auth/login`, persona);\n  }\n  registrar(persona) {\n    return this.httpClient.post(`${environment.url}auth/register`, persona);\n  }\n  getDecodedToken(token) {\n    try {\n      return jwtDecode(token);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  }\n  // Método para obtener el correo electrónico del token\n  setEmailFromToken() {\n    let token = sessionStorage.getItem('token');\n    const decodedToken = this.getDecodedToken(token);\n    console.log;\n    if (decodedToken) {\n      let correo = decodedToken.sub;\n      sessionStorage.setItem('correoPersona', correo);\n      console.log(correo);\n    }\n    return null;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,kCAAkC;AAC9D,SAASC,SAAS,QAAQ,YAAY;;;AAMtC,OAAM,MAAOC,WAAW;EAEtBC,YACUC,UAAqB;IAArB,eAAU,GAAVA,UAAU;EACjB;EAEHC,cAAc,CAACC,OAAW;IACxB,OAAO,IAAI,CAACF,UAAU,CAACG,IAAI,CAAC,GAAGP,WAAW,CAACQ,GAAG,YAAY,EAAEF,OAAO,CAAC;EACtE;EACAG,SAAS,CAACH,OAAW;IACnB,OAAO,IAAI,CAACF,UAAU,CAACG,IAAI,CAAC,GAAGP,WAAW,CAACQ,GAAG,eAAe,EAAEF,OAAO,CAAC;EACzE;EAEAI,eAAe,CAACC,KAAa;IAC3B,IAAI;MACF,OAAOV,SAAS,CAACU,KAAK,CAAC;KACxB,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,IAAI;;EAEf;EAEA;EACAE,iBAAiB;IACf,IAAIH,KAAK,GAACI,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,MAAMC,YAAY,GAAG,IAAI,CAACP,eAAe,CAACC,KAAK,CAAC;IAChDE,OAAO,CAACK,GAAG;IACX,IAAID,YAAY,EAAE;MAChB,IAAIE,MAAM,GAACF,YAAY,CAACG,GAAG;MAC3BL,cAAc,CAACM,OAAO,CAAC,eAAe,EAACF,MAAM,CAAC;MAC9CN,OAAO,CAACK,GAAG,CAACC,MAAM,CAAC;;IAErB,OAAO,IAAI;EACb;EAAC;qBAjCUjB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAoB,SAAXpB,WAAW;IAAAqB,YAFV;EAAM","names":["environment","jwtDecode","AuthService","constructor","httpClient","iniciarSession","persona","post","url","registrar","getDecodedToken","token","error","console","setEmailFromToken","sessionStorage","getItem","decodedToken","log","correo","sub","setItem","factory","providedIn"],"sourceRoot":"","sources":["/home/bsvanegas/Documents/Workspace/deporte/ventaUniformeFrontend/src/app/services/auth/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { ErrorHandler, Injectable } from '@angular/core';\nimport { BehaviorSubject, catchError, map, tap } from 'rxjs';\nimport { environment } from 'src/app/environments/environment';\nimport { jwtDecode } from 'jwt-decode';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    private httpClient:HttpClient,\n  ) {}\n\n  iniciarSession(persona:any){\n    return this.httpClient.post(`${environment.url}auth/login`, persona);\n  }\n  registrar(persona:any){\n    return this.httpClient.post(`${environment.url}auth/register`, persona);\n  }\n\n  getDecodedToken(token: string): any {\n    try {\n      return jwtDecode(token);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  }\n\n  // Método para obtener el correo electrónico del token\n  setEmailFromToken(): string | null {\n    let token=sessionStorage.getItem('token');\n    const decodedToken = this.getDecodedToken(token);\n    console.log\n    if (decodedToken) {\n      let correo=decodedToken.sub;\n      sessionStorage.setItem('correoPersona',correo);\n      console.log(correo);\n    }\n    return null;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}