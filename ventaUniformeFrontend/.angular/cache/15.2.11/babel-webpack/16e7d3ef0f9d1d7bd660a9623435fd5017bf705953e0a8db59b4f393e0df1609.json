{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CarritoService {\n  constructor() {\n    this.vestimentas = [];\n    this.costo = '';\n  }\n  getVestimentas() {\n    return this.vestimentas = JSON.parse(sessionStorage.getItem('vestimentas') || '[]');\n  }\n  getTotal() {\n    return this.costo = String(sessionStorage.getItem('total'));\n  }\n  addVestimenta(vestimenta) {\n    // Busca una vestimenta existente que coincida con el ID y la talla\n    let vestimentaExistente = this.vestimentas.find(item => item.vestimenta.id === vestimenta.id && item.vestimenta.talla === vestimenta.talla);\n    if (vestimentaExistente) {\n      // Si ya existe una vestimenta con la misma ID y talla, solo incrementa las unidades\n      vestimentaExistente.vestimenta.unidadesVestimenta += 1;\n    } else {\n      // Si no existe, agrega una nueva entrada al carrito\n      let vestimentaItem = {\n        id: this.vestimentas.length + 1,\n        vestimenta: {\n          ...vestimenta,\n          unidadesVestimenta: 1\n        }\n      };\n      let vestimentaList = this.vestimentas.push(vestimentaItem);\n      sessionStorage.setItem('vestimentas', JSON.stringify(vestimentaList));\n    }\n    let costoTotal = this.costo + Number(vestimenta.costo);\n    sessionStorage.setItem('total', costoTotal);\n  }\n  removeVestimenta(vestimentaItem) {\n    if (vestimentaItem.vestimenta.unidadesVestimenta > 1) {\n      vestimentaItem.vestimenta.unidadesVestimenta--;\n    } else {\n      const index = this.vestimentas.indexOf(vestimentaItem);\n      if (index > -1) {\n        this.vestimentas.splice(index, 1);\n      }\n    }\n    this.costo.next(this.costo.value - Number(vestimentaItem.vestimenta.costo));\n  }\n  countVestimentas(vestimentaList) {\n    if (vestimentaList.length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function CarritoService_Factory(t) {\n    return new (t || CarritoService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CarritoService,\n    factory: CarritoService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,cAAc;EAEzBC;IAEQ,gBAAW,GAAU,EAAE;IACvB,UAAK,GAAS,EAAE;EAHR;EAKhBC,cAAc;IACZ,OAAO,IAAI,CAACC,WAAW,GAACC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC;EAEnF;EACAC,QAAQ;IACN,OAAO,IAAI,CAACC,KAAK,GAACC,MAAM,CAACJ,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EAC3D;EAEAI,aAAa,CAACC,UAAe;IAC3B;IACA,IAAIC,mBAAmB,GAAG,IAAI,CAACV,WAAW,CAACW,IAAI,CAACC,IAAI,IAClDA,IAAI,CAACH,UAAU,CAACI,EAAE,KAAKJ,UAAU,CAACI,EAAE,IACpCD,IAAI,CAACH,UAAU,CAACK,KAAK,KAAKL,UAAU,CAACK,KAAK,CAC3C;IAED,IAAIJ,mBAAmB,EAAE;MACvB;MACAA,mBAAmB,CAACD,UAAU,CAACM,kBAAkB,IAAI,CAAC;KACvD,MAAM;MACL;MACA,IAAIC,cAAc,GAAG;QACnBH,EAAE,EAAE,IAAI,CAACb,WAAW,CAACiB,MAAM,GAAG,CAAC;QAC/BR,UAAU,EAAE;UAAE,GAAGA,UAAU;UAAEM,kBAAkB,EAAE;QAAC;OACnD;MACD,IAAIG,cAAc,GAAC,IAAI,CAAClB,WAAW,CAACmB,IAAI,CAACH,cAAc,CAAC;MACxDb,cAAc,CAACiB,OAAO,CAAC,aAAa,EAAEnB,IAAI,CAACoB,SAAS,CAACH,cAAc,CAAC,CAAC;;IAEvE,IAAII,UAAU,GAAC,IAAI,CAAChB,KAAK,GAAGiB,MAAM,CAACd,UAAU,CAACH,KAAK,CAAC;IACpDH,cAAc,CAACiB,OAAO,CAAC,OAAO,EAAEE,UAAU,CAAC;EAE7C;EACAE,gBAAgB,CAACR,cAAmB;IAClC,IAAIA,cAAc,CAACP,UAAU,CAACM,kBAAkB,GAAG,CAAC,EAAE;MACpDC,cAAc,CAACP,UAAU,CAACM,kBAAkB,EAAE;KAC/C,MAAM;MACL,MAAMU,KAAK,GAAG,IAAI,CAACzB,WAAW,CAAC0B,OAAO,CAACV,cAAc,CAAC;MACtD,IAAIS,KAAK,GAAG,CAAC,CAAC,EAAE;QACd,IAAI,CAACzB,WAAW,CAAC2B,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;;IAIrC,IAAI,CAACnB,KAAK,CAACsB,IAAI,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,GAAGN,MAAM,CAACP,cAAc,CAACP,UAAU,CAACH,KAAK,CAAC,CAAC;EAE7E;EACAwB,gBAAgB,CAACZ,cAAmB;IAClC,IAAIA,cAAc,CAACD,MAAM,GAAG,CAAC,EAAE;MAC7B,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,KAAK;;EAEhB;EAAC;qBAzDUpB,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAkC,SAAdlC,cAAc;IAAAmC,YAFb;EAAM","names":["CarritoService","constructor","getVestimentas","vestimentas","JSON","parse","sessionStorage","getItem","getTotal","costo","String","addVestimenta","vestimenta","vestimentaExistente","find","item","id","talla","unidadesVestimenta","vestimentaItem","length","vestimentaList","push","setItem","stringify","costoTotal","Number","removeVestimenta","index","indexOf","splice","next","value","countVestimentas","factory","providedIn"],"sourceRoot":"","sources":["/home/bsvanegas/Documents/Workspace/deporte/ventaUniformeFrontend/src/app/services/carrito/carrito.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { IVestimentaResultado } from 'src/app/models/vestimenta-preview';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CarritoService {\n\n  constructor() { }\n\n  private vestimentas: any[] = [];\n  private costo: string='';\n\n  getVestimentas() {\n    return this.vestimentas=JSON.parse(sessionStorage.getItem('vestimentas') || '[]');\n\n  }\n  getTotal() {\n    return this.costo=String(sessionStorage.getItem('total'));\n  }\n\n  addVestimenta(vestimenta: any) {\n    // Busca una vestimenta existente que coincida con el ID y la talla\n    let vestimentaExistente = this.vestimentas.find(item => \n      item.vestimenta.id === vestimenta.id && \n      item.vestimenta.talla === vestimenta.talla\n    );\n\n    if (vestimentaExistente) {\n      // Si ya existe una vestimenta con la misma ID y talla, solo incrementa las unidades\n      vestimentaExistente.vestimenta.unidadesVestimenta += 1;\n    } else {\n      // Si no existe, agrega una nueva entrada al carrito\n      let vestimentaItem = {\n        id: this.vestimentas.length + 1,\n        vestimenta: { ...vestimenta, unidadesVestimenta: 1 }\n      };\n      let vestimentaList=this.vestimentas.push(vestimentaItem);\n      sessionStorage.setItem('vestimentas', JSON.stringify(vestimentaList))\n    }\n    let costoTotal=this.costo + Number(vestimenta.costo);\n    sessionStorage.setItem('total', costoTotal);\n\n  }\n  removeVestimenta(vestimentaItem: any) {\n    if (vestimentaItem.vestimenta.unidadesVestimenta > 1) {\n      vestimentaItem.vestimenta.unidadesVestimenta--;\n    } else {\n      const index = this.vestimentas.indexOf(vestimentaItem);\n      if (index > -1) {\n        this.vestimentas.splice(index, 1);\n      }\n\n    }\n    this.costo.next(this.costo.value - Number(vestimentaItem.vestimenta.costo));\n\n  }\n  countVestimentas(vestimentaList: any): boolean {\n    if (vestimentaList.length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}